from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from sqlalchemy import create_engine
from sqlalchemy.pool import StaticPool
from langchain_openai import ChatOpenAI
from langchain_community.utilities.sql_database import SQLDatabase
from langchain_community.agent_toolkits.sql.base import create_sql_agent
# from langchain.agents import create_sql_agent
from langchain.agents.agent_types import AgentType
from dotenv import load_dotenv
from fastapi.middleware.cors import CORSMiddleware
from langchain.prompts import PromptTemplate
import os
 
role = "employee" #"admin
table_metadata = {
        "employee_view": {
        "description": "A view containing employee ID and position information.",
        "columns": {
            "employee_id": "Unique identifier for the employee.",
            "position": "Position of the employee."
        }
    }
}

metadata_prompt = "Here is metadata for the database:\n\n"

for table, details in table_metadata.items():
    metadata_prompt += f"Table: {table} - {details['description']}\n"
    for column, desc in details["columns"].items():
        metadata_prompt += f"   Column: {column} - {desc}\n"
    metadata_prompt += "\n"
 
openai_api_key = ""
supabase_url = "https://zofdiwijmmeltnrrjxux.supabase.co"
supabase_db_url = "postgresql://postgres.zofdiwijmmeltnrrjxux:hamdaz%40100123@aws-0-ap-south-1.pooler.supabase.com:5432/postgres"
 
if not openai_api_key:
    raise ValueError("OpenAI API key is missing. Please set it in .env.")
 
if not supabase_db_url:
    raise ValueError("Supabase Database URL is missing. Please set it in .env.")
 
# SQLAlchemy database connection (Supabase PostgreSQL)

engine = create_engine(supabase_db_url, poolclass=StaticPool,)
# engine.dispose()
# Create SQLDatabase instance
edb = SQLDatabase(engine,view_support=True, ignore_tables=["employees", "user_credentials"] ) #  include_tables=["employee_view"]
adb = SQLDatabase(engine)
if role=="admin":
    db=adb
elif role =="employee":
    db=edb


print("Available tables:", edb.get_usable_table_names()) 
 
# Define OpenAI model
llm = ChatOpenAI(model="gpt-4o", api_key=openai_api_key)

 
# LangChain SQL Agent with error handling
agent_executor = create_sql_agent(
    db=db,
    llm=llm,
    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
    verbose=True,
    handle_parsing_errors=True,
    return_intermediate_steps=True,
    # system_message=warning
    # metadata_prompt
)

 
app = FastAPI()
 
# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  #"http://localhost:63903"
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
 

class QueryRequest(BaseModel):
    query: str
    role: str  # Role is passed in the request


@app.post("/query")
async def query_sql(request: QueryRequest):
    try:
        print(f"Received query: {request.query}, Role: {request.role}")

        # Select the database based on the role
        db = adb if request.role.lower() == "admin" else edb

        # Create an agent for the selected database
        agent_executor = create_sql_agent(
            db=db,
            llm=llm,
            agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
            verbose=True,
            handle_parsing_errors=True,
            return_intermediate_steps=True,
        )

        # Invoke the agent
        response = agent_executor.invoke({"input": request.query})
        generated_sql = (
            response.get("intermediate_steps", [])[0][1]
            if response.get("intermediate_steps")
            else "SQL Query not available."
        )

        return {"generated_sql": generated_sql, "output": response["output"]}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
